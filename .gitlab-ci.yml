include:
  - "cicd-config/.rules-ci.yml"
  - "cicd-config/.variables-ci.yml"

stages:
  - build
  - test
  - deploy

clean:
  extends:
    - .common-rule
  stage: build
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - echo "Cleaning leftovers from previous builds"
    - mvn $MAVEN_CLI_OPTS clean -B

build:
  extends:
    - .common-rule
  stage: build
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - echo "Compiling the code..."
    - mvn $MAVEN_CLI_OPTS package -DskipTests=true -B
  artifacts:
    name: "Maven artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - "**/target"

code-analysis:
  extends:
    - .common-rule
  stage: test
  script:
    - echo "Running SonarQube..."
    - echo "To be done..."

unit-test:
  extends:
    - .common-rule
  stage: test
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - echo "Running unit tests..."
    - mvn $MAVEN_CLI_OPTS test

swagger:
  extends:
    - .after-merge-rule
  stage: deploy
  script:
    - sudo docker stop swagger
    - sudo docker rm swagger
    - sudo docker rmi swaggerapi/swagger-ui
    - sudo docker run -d --name swagger -e BASE_URL=/swagger -p 80:8080 -e SWAGGER_JSON=/swagger-api/pri-api.yaml -v /${CI_PROJECT_DIR}/pri-application/:/swagger-api swaggerapi/swagger-ui

deploy:
  extends:
    - .after-merge-rule
  stage: deploy
  before_script:
    - sudo docker version
    - sudo docker compose version
  script:
    - sudo echo "Deployment..."
    - sudo echo "Project dir=${CI_PROJECT_DIR}"
    - sudo echo "POSTGRES_URL=${POSTGRES_URL}" >> ${CI_PROJECT_DIR}/config.env
    - sudo echo "POSTGRES_USER=${POSTGRES_USER}" >> ${CI_PROJECT_DIR}/config.env
    - sudo echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> ${CI_PROJECT_DIR}/config.env
    - sudo echo "POSTGRES_DB=${POSTGRES_DB}" >> ${CI_PROJECT_DIR}/config.env
    - sudo echo "JWT_TOKEN=${JWT_TOKEN}" >> ${CI_PROJECT_DIR}/config.env
    - sudo cat ${CI_PROJECT_DIR}/config.env
    - sudo docker compose -f ${CI_PROJECT_DIR}/docker-compose-prod.yml --env-file ${CI_PROJECT_DIR}/config.env down
    - sudo docker compose -f ${CI_PROJECT_DIR}/docker-compose-prod.yml --env-file ${CI_PROJECT_DIR}/config.env build
    - sudo docker compose -f ${CI_PROJECT_DIR}/docker-compose-prod.yml --env-file ${CI_PROJECT_DIR}/config.env up -d
