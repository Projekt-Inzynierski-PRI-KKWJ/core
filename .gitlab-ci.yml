include:
  - "cicd-config/.rules-ci.yml"
  - "cicd-config/.variables-ci.yml"

stages:
  - clean
  - build
  - test
  - build-image
  - publish-image
  - deploy

clean:
  extends:
    - .common-rule
  image: $IMAGE_OPENJDK_MVN
  stage: clean
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - echo "Cleaning leftovers from previous builds"
    - mvn $MAVEN_CLI_OPTS clean -B

build:
  extends:
    - .common-rule
  image: $IMAGE_OPENJDK_MVN
  stage: build
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - echo "Compiling the code..."
    - mvn $MAVEN_CLI_OPTS package -DskipTests=true -B
  artifacts:
    name: "Maven artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - "**/target"

code-analysis:
  extends:
    - .common-rule
  image: $IMAGE_OPENJDK_MVN
  stage: test
  script:
    - echo "Running SonarQube..."
    - echo "To be done..."

unit-test:
  extends:
    - .common-rule
  image: $IMAGE_OPENJDK_MVN
  stage: test
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - echo "Running unit tests..."
    - mvn $MAVEN_CLI_OPTS test

pages:
  extends:
    - .after-merge-rule
  image: $IMAGE_NODE_LATEST
  stage: deploy
  cache:
    paths:
      - ./node_modules
  before_script:
    - npm install swagger-ui-dist@3.22.1
  script:
    - mkdir public
    - cp -rp node_modules/swagger-ui-dist/* public
    - cp -rp $DOCS_FOLDER/* public
    - sed -i "s#https://petstore\.swagger\.io/v2/swagger\.json#$SPEC_TO_DISPLAY#g" public/index.html
  artifacts:
    paths:
      - public

deploy:
  extends:
    - .after-merge-rule
  image: docker:latest
  services:
    - docker:dind
  stage: deploy
  before_script:
    - docker version
    - docker compose version
  script:
    - "Deployment..."
    # TODO: Necessary for final deployment stage, when server is available
    # - echo "POSTGRES_URL=${POSTGRES_URL}" >> config.env
    # - echo "POSTGRES_USER=${POSTGRES_USER}" >> config.env
    # - echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> config.env
    # - echo "POSTGRES_DB=${POSTGRES_DB}" >> config.env
    # - echo "JWT_TOKEN=${JWT_TOKEN}" >> config.env
    # - cat config.env
    # - docker compose -f docker-compose-prod.yml down
    # - docker compose -f docker-compose-prod.yml build
    # - docker compose -f docker-compose-prod.yml up
